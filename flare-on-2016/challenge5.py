#!/usr/bin/env python

counter = 0
index = 9
word_40df1a = 0
word_40df18 = 0
memory = 0
ss = "kYwxCbJoLp"
my_buffer = \
	[item for sublist in [[ord(c),0] for c in ss] \
		for item in sublist] \
	+ [0]*0xff

def get_memory(arg):
	xs = [
		0x00, 0x00, 0x21, 0x00, 0x02, 0x00, 0x00, 0x00, 0x91, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x0c, 0x00,
		0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0c, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x1d, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x63, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x18, 0x00, 0x06, 0x00, 0x00, 0x00, 0x54, 0x00, 0x08, 0x00,
		0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x29, 0x00, 0x09, 0x00,
		0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x00,
		0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x00,
		0x0a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x01, 0x00, 0x0b, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x59, 0x00, 0x02, 0x00, 0x0c, 0x00,
		0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x0c, 0x00,
		0x00, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
		0x02, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x60, 0x00, 0x09, 0x00,
		0x0a, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x01, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x7c, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x09, 0x00, 0x0a, 0x00,
		0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0x00,
		0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x0c, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x87, 0x00, 0x0a, 0x00, 0x00, 0x00,
		0x36, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,
		0x0b, 0x00, 0x01, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x01, 0x00,
		0x0b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x00, 0x02, 0x00,
		0x06, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x08, 0x00, 0x00, 0x00,
		0xa0, 0x00, 0x00, 0x00, 0x96, 0x00, 0x09, 0x00, 0x0a, 0x00,
		0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x06, 0x00,
		0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x00, 0x0a, 0x00,
		0x00, 0x00, 0x23, 0x03, 0x00, 0x00, 0x2b, 0x01, 0x03, 0x00,
		0x0c, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0b, 0x00,
		0x01, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x0c, 0x00,
		0x01, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x03, 0x00, 0x02, 0x00, 0x0b, 0x00, 0x01, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xb2, 0x00,
		0x00, 0x00, 0xc7, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x07, 0x00,
		0x00, 0x00, 0x77, 0xfe, 0x08, 0x00, 0x00, 0x00, 0xd8, 0x00,
		0x00, 0x00, 0xd1, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x58, 0x00, 0x02, 0x00, 0x0c, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00,
		0x8c, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x60, 0x08, 0x00,
		0x00, 0x00, 0xee, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x09, 0x00,
		0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00,
		0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x01, 0x00,
		0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x00, 0x00,
		0x74, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00,
		0xfd, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x09, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x1d, 0x01, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00,
		0x0c, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x01, 0x00, 0x0b, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
		0x0b, 0x01, 0x00, 0x00, 0x1d, 0x01, 0x09, 0x00, 0x0a, 0x00,
		0x00, 0x00, 0x06, 0x00, 0x05, 0x00, 0x00, 0x00, 0xc0, 0x1d,
		0x08, 0x00, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, 0x29, 0x01,
		0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x71, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x3d, 0x01, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x77, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x3d, 0x01, 0x0a, 0x00, 0x00, 0x00, 0x16, 0x00, 0x02, 0x00,
		0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x61, 0x00,
		0x08, 0x00, 0x00, 0x00, 0x53, 0x01, 0x00, 0x00, 0x4c, 0x01,
		0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x2c, 0x00, 0x03, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00,
		0x01, 0x00, 0x0b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x21,
		0x0b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00,
		0x0c, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x03, 0x00,
		0x0b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
		0x00, 0x00, 0x59, 0x01, 0x00, 0x00, 0x6e, 0x01, 0x09, 0x00,
		0x0a, 0x00, 0x00, 0x00, 0xca, 0x01, 0x06, 0x00, 0x00, 0x00,
		0xf5, 0x1f, 0x08, 0x00, 0x00, 0x00, 0x81, 0x01, 0x00, 0x00,
		0x7a, 0x01, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x12, 0x00, 0x02, 0x00, 0x0c, 0x00, 0x00, 0x00,
		0x0d, 0x00, 0x0a, 0x25, 0x73, 0x0a, 0x00, 0x00, 0x00, 0x00,
		0x30, 0xe1, 0x40, 0x00, 0x88, 0xe1, 0x40, 0x00, 0x28, 0x00,
		0x6e, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x6c, 0x00, 0x29, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x28, 0x6e, 0x75, 0x6c, 0x6c, 0x29,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x06,
		0x00, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x06, 0x00, 0x06,
		0x02, 0x10, 0x04, 0x45, 0x45, 0x45, 0x05, 0x05, 0x05, 0x05,
		0x05, 0x35, 0x30, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x28,
		0x20, 0x38, 0x50, 0x58, 0x07, 0x08, 0x00, 0x37, 0x30, 0x30,
		0x57, 0x50, 0x07, 0x00, 0x00, 0x20, 0x20, 0x08, 0x00, 0x00,
		0x00, 0x00, 0x08, 0x60, 0x68, 0x60, 0x60, 0x60, 0x60, 0x00,
		0x00, 0x78, 0x70, 0x78, 0x78, 0x78, 0x78, 0x08, 0x07, 0x08,
		0x00, 0x00, 0x07, 0x00, 0x08, 0x08, 0x08, 0x00, 0x00, 0x08,
		0x00, 0x08, 0x00, 0x07, 0x08, 0x00, 0x00, 0x00]
	return (xs[arg*2+1]<<8) + xs[arg*2]

def sub_401000(arg_1):
	global index, my_buffer
	index += 1
	my_buffer[index*2] = arg_1 & 0xff
	my_buffer[index*2+1] = (arg_1 >> 8) & 0xff
	
def sub_401030():
	global counter, memory
	counter += 1
	var_1 = get_memory(counter)
	sub_401000(var_1)
	counter += 1

def sub_401080():
	global index, my_buffer
	ret = (my_buffer[index*2+1]<<8) + my_buffer[index*2]
	#var_1 = my_buffer[index]
	index -= 1
	print "returning index : %d" %ret
	return ret

def sub_4010c0():
	global counter
	counter += 1
	sub_401080()
	
def sub_4010e0():
	global counter
	var_1 = sub_401080()
	var_2 = sub_401080()
	var_3 = var_2 + var_1
	sub_401000(var_3)
	counter += 1

def sub_401130():
	global counter
	var_1 = sub_401080()
	var_2 = sub_401080()
	var_3 = var_2 - var_1
	sub_401000(var_3)
	counter += 1

def sub_401180():
	global counter
	var_1 = sub_401080()
	var_2 = sub_401080()
	
	sub_401000((var_2 << (0x10-var_1)) | (var_2 >> var_1))
	counter += 1

def sub_4011f0():
	global counter
	var_1 = sub_401080()
	var_2 = sub_401080()
	
	sub_401000((var_2 >> (0x10-var_1)) | (var_2 << var_1))
	counter += 1

def sub_401260():
	global counter
	var_1 = sub_401080()
	var_2 = sub_401080()
	var_3 = var_2 ^ var_1
	sub_401000(var_3)
	counter += 1

def sub_4012b0():
	global counter
	var_1 = sub_401080()
	var_2 = (~var_1) 
	sub_401000(var_2)
	counter += 1
	

def sub_401300():
	global counter
	var_1 = sub_401080()
	var_2 = sub_401080()
	if var_1 == var_2:
		var_3 = 1
	else:
		var_3 = 0
	sub_401000(var_3)
	counter += 1
	
def sub_401360():
	global counter
	var_2 = sub_401080()
	var_3 = sub_401080()
	var_1 = sub_401080()
	if(var_1 == 1):
		sub_401000(var_2)
	else:
		sub_401000(var_3)
	counter += 1

def sub_4013c0():
	global counter
	counter = sub_401080()

#NOT COMPLETE
def sub_4013d0():
	global counter, word_40df1a, index, word_40df18
	counter += 1
	var_2 = get_memory(counter)
	var_3 = var_2
	var_1 = 0
	if(var_3 == 0):
		var_1 = word_40df18
	elif(var_3 == 1):
		var_1 = word_40df1a
	elif(var_3 == 2):
		var_1 = index
	elif(var_3 == 3):
		var_1 = counter
	sub_401000(var_1)
	counter += 1

def sub_401480():
	global counter, word_40df18, word_40df1a, index
	counter += 1
	var_2 = get_memory(counter)
	var_1 = sub_401080()
	var_3 = var_2
	if(var_3 == 0):
		word_40df18 = var_1
	elif(var_3 == 1):
		word_40df1a = var_1
	elif(var_3 == 2):
		index = var_1
	elif(var_3 == 3):
		counter = var_1
	counter += 1

def sub_401520():
	global counter
	counter += 1

def sub_401540():
	global func_buffer, memory, counter, index
	var_1 = get_memory(counter)
	#print "var_1 = %d" %var_1
	func = func_buffer[var_1]
	func()
	
#sub_401610
def main():
	global counter, index, my_buffer
	s = ''
	while counter < 0x182:
		print "counter = %d" %(counter)
		print "index = %d" %index

		sub_401540()
	for c in my_buffer:
		if c != 0:
			print chr(c)
	
	
func_buffer = [sub_401030, sub_4010c0, sub_4010e0, sub_401130, sub_401180, sub_4011f0, sub_401260, sub_4012b0, sub_401300, sub_401360, sub_4013c0, sub_4013d0, sub_401480, sub_401520]

main()
